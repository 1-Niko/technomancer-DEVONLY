using System.Collections.Generic;
using System.Runtime.CompilerServices;
using UnityEngine;
using static Slugpack.WeakTables;

namespace Slugpack
{
    public class ConnectingLine : CosmeticSprite
    {
        public Color colour { get; set; }
        public Vector2 pos { get; set; }
        public float rot { get; set; }
        public float length { get; set; }
        public int lineCount { get; set; }
        public List<Vector2> connections { get; set; }
        public HighlightSprite connectionA { get; set; }
        public HighlightSprite connectionB { get; set; }

        public ConnectingLine(Vector2 pos, float rot, float length, int lineCount, Player technomancer, List<Vector2> connections, HighlightSprite connectionA, HighlightSprite connectionB, float padding)
        {
            this.pos = pos;
            this.rot = rot;
            this.length = length;
            this.lineCount = lineCount;
            this.technomancer = technomancer;
            this.connections = connections;
            this.connectionA = connectionA;
            this.connectionB = connectionB;
            this.padding = padding;
        }

        public override void Update(bool eu)
        {
            base.Update(eu);
            this.stepTimer++;

            if (!this.connectionA.connections.Contains(this))
                this.connectionA.connections.Add(this);
            if (!this.connectionB.connections.Contains(this))
                this.connectionB.connections.Add(this);

            this.pos = (this.connectionA.pos + this.connectionB.pos) / 2;
            this.rot = Utilities.CalculateAngleBetweenVectorsForLineSegment(this.connectionA.pos, this.connectionB.pos);
            this.length = RWCustom.Custom.Dist(this.connectionA.pos, this.connectionB.pos) - (this.padding * 2);
            this.connections = new List<Vector2> { this.connectionA.pos, this.connectionB.pos };
        }

        public override void DrawSprites(RoomCamera.SpriteLeaser sLeaser, RoomCamera rCam, float timeStacker, Vector2 camPos)
        {
            base.DrawSprites(sLeaser, rCam, timeStacker, camPos);

            sLeaser.sprites[0].element = Futile.atlasManager.GetElementWithName("connecting_line");

            // This is required to not get any strange artifacts. No idea why, but it's 100% required

            sLeaser.sprites[0].scaleX = (1.0002f / 1024f) * this.length;
            sLeaser.sprites[0].scaleY = 1.0002f; // 1.0002f;

            sLeaser.sprites[0].SetPosition(this.pos - rCam.pos);

            sLeaser.sprites[0].alpha = (this.lineCount / 8f) % 1;

            sLeaser.sprites[0].rotation = this.rot;

            if (Constants.SlugpackShaders.TryGetValue(rCam.room.game.rainWorld, out var Shaders))
            {
                sLeaser.sprites[0].shader = Shaders.ConnectingLine;

                sLeaser.sprites[0]._renderLayer?._material?.SetFloat("_RandomOffset", stepTimer);

                if (!Constants.ScanLineMemory.TryGetValue(this.technomancer, out var scanline)) Constants.ScanLineMemory.Add(this.technomancer, scanline = new WeakTables.ScanLine());

                sLeaser.sprites[0]._renderLayer?._material?.SetVector("_PlayerPosition", new Vector4(scanline.screenPosition.x, scanline.screenPosition.y, 0, 0));
            }
        }

        public override void InitiateSprites(RoomCamera.SpriteLeaser sLeaser, RoomCamera rCam)
        {
            sLeaser.sprites = new FSprite[1];

            sLeaser.sprites[0] = new FSprite("connecting_line", true);

            sLeaser.sprites[0].SetPosition(this.pos - rCam.pos);

            AddToContainer(sLeaser, rCam, null);
        }

        public override void AddToContainer(RoomCamera.SpriteLeaser sLeaser, RoomCamera rCam, FContainer newContatiner)
        {
            newContatiner ??= rCam.ReturnFContainer("Foreground");
            foreach (FSprite fsprite in sLeaser.sprites)
            {
                fsprite.RemoveFromContainer();
                newContatiner.AddChild(fsprite);
            }
        }

        float stepTimer;

        float padding;

        Player technomancer;
    }

    public class HighlightSprite : CosmeticSprite
    {
        public Color colour { get; set; }
        public List<ConnectingLine> connections { get; set; }
        public bool removed { get; set; }

        public HighlightSprite(Vector2 pos, int nodeLevel, int protectionLevels, Player technomancer, PhysicalObject anchor, Room room)
        {
            this.pos = pos;
            this.removed = false;
            this.lastPos = this.pos;
            this.nodeLevel = nodeLevel;
            this.protectionLevels = protectionLevels;
            this.technomancer = technomancer;
            this.anchor = anchor;
            this.room = room;
            this.connections = new List<ConnectingLine>();
        }

        public override void Destroy()
        {
            for (int i = 0; i < this.connections.Count; i++)
                this.room.RemoveObject(this.connections[i]);
            this.connections.Clear();
            if (Constants.ScanLineMemory.TryGetValue(this.technomancer, out var scanline))
                scanline.TechIcons.Remove(this);

            this.removed = true;

            base.Destroy();
        }

        public override void Update(bool eu)
        {
            base.Update(eu);
            this.stepTimer++;
            if (this.anchor is Creature)
                this.pos = (this.anchor as Creature).mainBodyChunk.pos;
            if (!Utilities.CheckIfOnScreen(this.pos, this.room))
            {
                base.Destroy();
            }
        }

        public override void DrawSprites(RoomCamera.SpriteLeaser sLeaser, RoomCamera rCam, float timeStacker, Vector2 camPos)
        {
            base.DrawSprites(sLeaser, rCam, timeStacker, camPos);

            sLeaser.sprites[0].element = Futile.atlasManager.GetElementWithName($"karma_{this.nodeLevel}");
            sLeaser.sprites[1].element = Futile.atlasManager.GetElementWithName("protection_1");
            sLeaser.sprites[2].element = Futile.atlasManager.GetElementWithName("protection_2");
            sLeaser.sprites[3].element = Futile.atlasManager.GetElementWithName("protection_3");

            // This is required to not get any strange artifacts. No idea why, but it's 100% required

            sLeaser.sprites[0].scale = 1.0002f;
            sLeaser.sprites[1].scale = 1.0002f;
            sLeaser.sprites[2].scale = 1.0002f;
            sLeaser.sprites[3].scale = 1.0002f;

            sLeaser.sprites[0].isVisible = true;
            sLeaser.sprites[1].isVisible = this.protectionLevels > 0;
            sLeaser.sprites[2].isVisible = this.protectionLevels > 1;
            sLeaser.sprites[3].isVisible = this.protectionLevels > 2;

            Vector2 currentPos = Vector2.Lerp(lastPos, pos, timeStacker);

            sLeaser.sprites[0].SetPosition(currentPos - rCam.pos);
            sLeaser.sprites[1].SetPosition(currentPos - rCam.pos);
            sLeaser.sprites[2].SetPosition(currentPos - rCam.pos);
            sLeaser.sprites[3].SetPosition(currentPos - rCam.pos);

            if (Constants.SlugpackShaders.TryGetValue(rCam.room.game.rainWorld, out var Shaders))
            {
                sLeaser.sprites[0].shader = Shaders.SelectionShader;
                sLeaser.sprites[1].shader = Shaders.SelectionShader;
                sLeaser.sprites[2].shader = Shaders.SelectionShader;
                sLeaser.sprites[3].shader = Shaders.SelectionShader;

                sLeaser.sprites[1]._renderLayer?._material?.SetFloat("_RandomOffset", stepTimer);

                if (!Constants.ScanLineMemory.TryGetValue(this.technomancer, out var scanline)) Constants.ScanLineMemory.Add(this.technomancer, scanline = new WeakTables.ScanLine());

                sLeaser.sprites[1]._renderLayer?._material?.SetVector("_PlayerPosition", new Vector4(scanline.screenPosition.x, scanline.screenPosition.y,0 ,0));
            }

            sLeaser.sprites[0].color = this.colour;
            sLeaser.sprites[1].color = this.colour;
            sLeaser.sprites[2].color = this.colour;
            sLeaser.sprites[3].color = this.colour;
        }

        public override void InitiateSprites(RoomCamera.SpriteLeaser sLeaser, RoomCamera rCam)
        {
            sLeaser.sprites = new FSprite[4];

            sLeaser.sprites[0] = new FSprite($"karma_{this.nodeLevel}", true);
            sLeaser.sprites[1] = new FSprite("protection_1", true);
            sLeaser.sprites[2] = new FSprite("protection_2", true);
            sLeaser.sprites[3] = new FSprite("protection_3", true);

            sLeaser.sprites[0].isVisible = true;
            sLeaser.sprites[1].isVisible = this.protectionLevels > 0;
            sLeaser.sprites[2].isVisible = this.protectionLevels > 1;
            sLeaser.sprites[3].isVisible = this.protectionLevels > 2;

            sLeaser.sprites[0].SetPosition(this.pos - rCam.pos);
            sLeaser.sprites[1].SetPosition(this.pos - rCam.pos);
            sLeaser.sprites[2].SetPosition(this.pos - rCam.pos);
            sLeaser.sprites[3].SetPosition(this.pos - rCam.pos);

            AddToContainer(sLeaser, rCam, null);
        }

        public override void AddToContainer(RoomCamera.SpriteLeaser sLeaser, RoomCamera rCam, FContainer newContatiner)
        {
            newContatiner ??= rCam.ReturnFContainer("Foreground");
            foreach (FSprite fsprite in sLeaser.sprites)
            {
                fsprite.RemoveFromContainer();
                newContatiner.AddChild(fsprite);
            }
        }

        int nodeLevel;

        int protectionLevels;

        float stepTimer;

        Room room;

        Player technomancer;

        PhysicalObject anchor;
    }
}